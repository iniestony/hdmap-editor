// This Source Code Form is subject to the terms of the Mozilla Public
// License, v2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/

/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.1
 * source: map/map_road.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";

import * as dependency_1 from "./map_geometry";
import * as dependency_2 from "./map_id";

export namespace atlas.hdmap {
  export class BoundaryEdge extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            curve?: dependency_1.atlas.hdmap.Curve;
            type?: BoundaryEdge.Type;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("curve" in data && data.curve != undefined) {
          this.curve = data.curve;
        }
        if ("type" in data && data.type != undefined) {
          this.type = data.type;
        }
      }
    }
    get curve() {
      return pb_1.Message.getWrapperField(this, dependency_1.atlas.hdmap.Curve, 1);
    }
    set curve(value: dependency_1.atlas.hdmap.Curve) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get type() {
      return pb_1.Message.getField(this, 2) as BoundaryEdge.Type;
    }
    set type(value: BoundaryEdge.Type) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      curve?: ReturnType<typeof dependency_1.atlas.hdmap.Curve.prototype.toObject>;
      type?: BoundaryEdge.Type;
    }) {
      const message = new BoundaryEdge({});
      if (data.curve != null) {
        message.curve = dependency_1.atlas.hdmap.Curve.fromObject(data.curve);
      }
      if (data.type != null) {
        message.type = data.type;
      }
      return message;
    }
    toObject() {
      const data: {
        curve?: ReturnType<typeof dependency_1.atlas.hdmap.Curve.prototype.toObject>;
        type?: BoundaryEdge.Type;
      } = {};
      if (this.curve != null) {
        data.curve = this.curve.toObject();
      }
      if (this.type != null) {
        data.type = this.type;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.curve !== undefined) {
        writer.writeMessage(1, this.curve, () => this.curve.serialize(writer));
      }
      if (this.type !== undefined) {
        writer.writeEnum(2, this.type);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoundaryEdge {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new BoundaryEdge();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.curve,
              () => (message.curve = dependency_1.atlas.hdmap.Curve.deserialize(reader)),
            );
            break;
          case 2:
            message.type = reader.readEnum();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): BoundaryEdge {
      return BoundaryEdge.deserialize(bytes);
    }
  }
  export namespace BoundaryEdge {
    export enum Type {
      UNKNOWN = 0,
      NORMAL = 1,
      LEFT_BOUNDARY = 2,
      RIGHT_BOUNDARY = 3,
    }
  }
  export class BoundaryPolygon extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            edge: BoundaryEdge[];
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
      if (!Array.isArray(data) && typeof data == "object") {
        this.edge = data.edge;
      }
    }
    get edge() {
      return pb_1.Message.getRepeatedWrapperField(this, BoundaryEdge, 1);
    }
    set edge(value: BoundaryEdge[]) {
      pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: { edge: ReturnType<typeof BoundaryEdge.prototype.toObject>[] }) {
      const message = new BoundaryPolygon({
        edge: data.edge.map((item) => BoundaryEdge.fromObject(item)),
      });
      return message;
    }
    toObject() {
      const data: {
        edge: ReturnType<typeof BoundaryEdge.prototype.toObject>[];
      } = {
        edge: this.edge.map((item: BoundaryEdge) => item.toObject()),
      };
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.edge !== undefined) {
        writer.writeRepeatedMessage(1, this.edge, (item: BoundaryEdge) => item.serialize(writer));
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoundaryPolygon {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new BoundaryPolygon();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(message.edge, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                1,
                BoundaryEdge.deserialize(reader),
                BoundaryEdge,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): BoundaryPolygon {
      return BoundaryPolygon.deserialize(bytes);
    }
  }
  export class RoadBoundary extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            outer_polygon?: BoundaryPolygon;
            hole: BoundaryPolygon[];
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("outer_polygon" in data && data.outer_polygon != undefined) {
          this.outer_polygon = data.outer_polygon;
        }
        this.hole = data.hole;
      }
    }
    get outer_polygon() {
      return pb_1.Message.getWrapperField(this, BoundaryPolygon, 1);
    }
    set outer_polygon(value: BoundaryPolygon) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get hole() {
      return pb_1.Message.getRepeatedWrapperField(this, BoundaryPolygon, 2);
    }
    set hole(value: BoundaryPolygon[]) {
      pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
      outer_polygon?: ReturnType<typeof BoundaryPolygon.prototype.toObject>;
      hole: ReturnType<typeof BoundaryPolygon.prototype.toObject>[];
    }) {
      const message = new RoadBoundary({
        hole: data.hole.map((item) => BoundaryPolygon.fromObject(item)),
      });
      if (data.outer_polygon != null) {
        message.outer_polygon = BoundaryPolygon.fromObject(data.outer_polygon);
      }
      return message;
    }
    toObject() {
      const data: {
        outer_polygon?: ReturnType<typeof BoundaryPolygon.prototype.toObject>;
        hole: ReturnType<typeof BoundaryPolygon.prototype.toObject>[];
      } = {
        hole: this.hole.map((item: BoundaryPolygon) => item.toObject()),
      };
      if (this.outer_polygon != null) {
        data.outer_polygon = this.outer_polygon.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.outer_polygon !== undefined) {
        writer.writeMessage(1, this.outer_polygon, () => this.outer_polygon.serialize(writer));
      }
      if (this.hole !== undefined) {
        writer.writeRepeatedMessage(2, this.hole, (item: BoundaryPolygon) =>
          item.serialize(writer),
        );
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoadBoundary {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new RoadBoundary();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.outer_polygon,
              () => (message.outer_polygon = BoundaryPolygon.deserialize(reader)),
            );
            break;
          case 2:
            reader.readMessage(message.hole, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                2,
                BoundaryPolygon.deserialize(reader),
                BoundaryPolygon,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): RoadBoundary {
      return RoadBoundary.deserialize(bytes);
    }
  }
  export class RoadROIBoundary extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            id?: dependency_2.atlas.hdmap.Id;
            road_boundaries: RoadBoundary[];
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("id" in data && data.id != undefined) {
          this.id = data.id;
        }
        this.road_boundaries = data.road_boundaries;
      }
    }
    get id() {
      return pb_1.Message.getWrapperField(this, dependency_2.atlas.hdmap.Id, 1);
    }
    set id(value: dependency_2.atlas.hdmap.Id) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get road_boundaries() {
      return pb_1.Message.getRepeatedWrapperField(this, RoadBoundary, 2);
    }
    set road_boundaries(value: RoadBoundary[]) {
      pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
      id?: ReturnType<typeof dependency_2.atlas.hdmap.Id.prototype.toObject>;
      road_boundaries: ReturnType<typeof RoadBoundary.prototype.toObject>[];
    }) {
      const message = new RoadROIBoundary({
        road_boundaries: data.road_boundaries.map((item) => RoadBoundary.fromObject(item)),
      });
      if (data.id != null) {
        message.id = dependency_2.atlas.hdmap.Id.fromObject(data.id);
      }
      return message;
    }
    toObject() {
      const data: {
        id?: ReturnType<typeof dependency_2.atlas.hdmap.Id.prototype.toObject>;
        road_boundaries: ReturnType<typeof RoadBoundary.prototype.toObject>[];
      } = {
        road_boundaries: this.road_boundaries.map((item: RoadBoundary) => item.toObject()),
      };
      if (this.id != null) {
        data.id = this.id.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.id !== undefined) {
        writer.writeMessage(1, this.id, () => this.id.serialize(writer));
      }
      if (this.road_boundaries !== undefined) {
        writer.writeRepeatedMessage(2, this.road_boundaries, (item: RoadBoundary) =>
          item.serialize(writer),
        );
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoadROIBoundary {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new RoadROIBoundary();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.id,
              () => (message.id = dependency_2.atlas.hdmap.Id.deserialize(reader)),
            );
            break;
          case 2:
            reader.readMessage(message.road_boundaries, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                2,
                RoadBoundary.deserialize(reader),
                RoadBoundary,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): RoadROIBoundary {
      return RoadROIBoundary.deserialize(bytes);
    }
  }
  export class RoadSection extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            id?: dependency_2.atlas.hdmap.Id;
            lane_id: dependency_2.atlas.hdmap.Id[];
            boundary?: RoadBoundary;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("id" in data && data.id != undefined) {
          this.id = data.id;
        }
        this.lane_id = data.lane_id;
        if ("boundary" in data && data.boundary != undefined) {
          this.boundary = data.boundary;
        }
      }
    }
    get id() {
      return pb_1.Message.getWrapperField(this, dependency_2.atlas.hdmap.Id, 1);
    }
    set id(value: dependency_2.atlas.hdmap.Id) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get lane_id() {
      return pb_1.Message.getRepeatedWrapperField(this, dependency_2.atlas.hdmap.Id, 2);
    }
    set lane_id(value: dependency_2.atlas.hdmap.Id[]) {
      pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get boundary() {
      return pb_1.Message.getWrapperField(this, RoadBoundary, 3);
    }
    set boundary(value: RoadBoundary) {
      pb_1.Message.setWrapperField(this, 3, value);
    }
    static fromObject(data: {
      id?: ReturnType<typeof dependency_2.atlas.hdmap.Id.prototype.toObject>;
      lane_id: ReturnType<typeof dependency_2.atlas.hdmap.Id.prototype.toObject>[];
      boundary?: ReturnType<typeof RoadBoundary.prototype.toObject>;
    }) {
      const message = new RoadSection({
        lane_id: data.lane_id.map((item) => dependency_2.atlas.hdmap.Id.fromObject(item)),
      });
      if (data.id != null) {
        message.id = dependency_2.atlas.hdmap.Id.fromObject(data.id);
      }
      if (data.boundary != null) {
        message.boundary = RoadBoundary.fromObject(data.boundary);
      }
      return message;
    }
    toObject() {
      const data: {
        id?: ReturnType<typeof dependency_2.atlas.hdmap.Id.prototype.toObject>;
        lane_id: ReturnType<typeof dependency_2.atlas.hdmap.Id.prototype.toObject>[];
        boundary?: ReturnType<typeof RoadBoundary.prototype.toObject>;
      } = {
        lane_id: this.lane_id.map((item: dependency_2.atlas.hdmap.Id) => item.toObject()),
      };
      if (this.id != null) {
        data.id = this.id.toObject();
      }
      if (this.boundary != null) {
        data.boundary = this.boundary.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.id !== undefined) {
        writer.writeMessage(1, this.id, () => this.id.serialize(writer));
      }
      if (this.lane_id !== undefined) {
        writer.writeRepeatedMessage(2, this.lane_id, (item: dependency_2.atlas.hdmap.Id) =>
          item.serialize(writer),
        );
      }
      if (this.boundary !== undefined) {
        writer.writeMessage(3, this.boundary, () => this.boundary.serialize(writer));
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoadSection {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new RoadSection();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.id,
              () => (message.id = dependency_2.atlas.hdmap.Id.deserialize(reader)),
            );
            break;
          case 2:
            reader.readMessage(message.lane_id, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                2,
                dependency_2.atlas.hdmap.Id.deserialize(reader),
                dependency_2.atlas.hdmap.Id,
              ),
            );
            break;
          case 3:
            reader.readMessage(
              message.boundary,
              () => (message.boundary = RoadBoundary.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): RoadSection {
      return RoadSection.deserialize(bytes);
    }
  }
  export class Road extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            id?: dependency_2.atlas.hdmap.Id;
            section: RoadSection[];
            junction_id?: dependency_2.atlas.hdmap.Id;
            type?: Road.Type;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("id" in data && data.id != undefined) {
          this.id = data.id;
        }
        this.section = data.section;
        if ("junction_id" in data && data.junction_id != undefined) {
          this.junction_id = data.junction_id;
        }
        if ("type" in data && data.type != undefined) {
          this.type = data.type;
        }
      }
    }
    get id() {
      return pb_1.Message.getWrapperField(this, dependency_2.atlas.hdmap.Id, 1);
    }
    set id(value: dependency_2.atlas.hdmap.Id) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get section() {
      return pb_1.Message.getRepeatedWrapperField(this, RoadSection, 2);
    }
    set section(value: RoadSection[]) {
      pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get junction_id() {
      return pb_1.Message.getWrapperField(this, dependency_2.atlas.hdmap.Id, 3);
    }
    set junction_id(value: dependency_2.atlas.hdmap.Id) {
      pb_1.Message.setWrapperField(this, 3, value);
    }
    get type() {
      return pb_1.Message.getField(this, 4) as Road.Type;
    }
    set type(value: Road.Type) {
      pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
      id?: ReturnType<typeof dependency_2.atlas.hdmap.Id.prototype.toObject>;
      section: ReturnType<typeof RoadSection.prototype.toObject>[];
      junction_id?: ReturnType<typeof dependency_2.atlas.hdmap.Id.prototype.toObject>;
      type?: Road.Type;
    }) {
      const message = new Road({
        section: data.section.map((item) => RoadSection.fromObject(item)),
      });
      if (data.id != null) {
        message.id = dependency_2.atlas.hdmap.Id.fromObject(data.id);
      }
      if (data.junction_id != null) {
        message.junction_id = dependency_2.atlas.hdmap.Id.fromObject(data.junction_id);
      }
      if (data.type != null) {
        message.type = data.type;
      }
      return message;
    }
    toObject() {
      const data: {
        id?: ReturnType<typeof dependency_2.atlas.hdmap.Id.prototype.toObject>;
        section: ReturnType<typeof RoadSection.prototype.toObject>[];
        junction_id?: ReturnType<typeof dependency_2.atlas.hdmap.Id.prototype.toObject>;
        type?: Road.Type;
      } = {
        section: this.section.map((item: RoadSection) => item.toObject()),
      };
      if (this.id != null) {
        data.id = this.id.toObject();
      }
      if (this.junction_id != null) {
        data.junction_id = this.junction_id.toObject();
      }
      if (this.type != null) {
        data.type = this.type;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.id !== undefined) {
        writer.writeMessage(1, this.id, () => this.id.serialize(writer));
      }
      if (this.section !== undefined) {
        writer.writeRepeatedMessage(2, this.section, (item: RoadSection) => item.serialize(writer));
      }
      if (this.junction_id !== undefined) {
        writer.writeMessage(3, this.junction_id, () => this.junction_id.serialize(writer));
      }
      if (this.type !== undefined) {
        writer.writeEnum(4, this.type);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Road {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new Road();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.id,
              () => (message.id = dependency_2.atlas.hdmap.Id.deserialize(reader)),
            );
            break;
          case 2:
            reader.readMessage(message.section, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                2,
                RoadSection.deserialize(reader),
                RoadSection,
              ),
            );
            break;
          case 3:
            reader.readMessage(
              message.junction_id,
              () => (message.junction_id = dependency_2.atlas.hdmap.Id.deserialize(reader)),
            );
            break;
          case 4:
            message.type = reader.readEnum();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): Road {
      return Road.deserialize(bytes);
    }
  }
  export namespace Road {
    export enum Type {
      UNKNOWN = 0,
      HIGHWAY = 1,
      CITY_ROAD = 2,
      PARK = 3,
    }
  }
}
