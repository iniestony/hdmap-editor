// This Source Code Form is subject to the terms of the Mozilla Public
// License, v2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/

/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.1
 * source: map/map_speed_control.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";

import * as dependency_1 from "./map_geometry";

export namespace atlas.hdmap {
  export class SpeedControl extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            name?: string;
            polygon?: dependency_1.atlas.hdmap.Polygon;
            speed_limit?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("name" in data && data.name != undefined) {
          this.name = data.name;
        }
        if ("polygon" in data && data.polygon != undefined) {
          this.polygon = data.polygon;
        }
        if ("speed_limit" in data && data.speed_limit != undefined) {
          this.speed_limit = data.speed_limit;
        }
      }
    }
    get name() {
      return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get polygon() {
      return pb_1.Message.getWrapperField(this, dependency_1.atlas.hdmap.Polygon, 2);
    }
    set polygon(value: dependency_1.atlas.hdmap.Polygon) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get speed_limit() {
      return pb_1.Message.getField(this, 3) as number;
    }
    set speed_limit(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
      name?: string;
      polygon?: ReturnType<typeof dependency_1.atlas.hdmap.Polygon.prototype.toObject>;
      speed_limit?: number;
    }) {
      const message = new SpeedControl({});
      if (data.name != null) {
        message.name = data.name;
      }
      if (data.polygon != null) {
        message.polygon = dependency_1.atlas.hdmap.Polygon.fromObject(data.polygon);
      }
      if (data.speed_limit != null) {
        message.speed_limit = data.speed_limit;
      }
      return message;
    }
    toObject() {
      const data: {
        name?: string;
        polygon?: ReturnType<typeof dependency_1.atlas.hdmap.Polygon.prototype.toObject>;
        speed_limit?: number;
      } = {};
      if (this.name != null) {
        data.name = this.name;
      }
      if (this.polygon != null) {
        data.polygon = this.polygon.toObject();
      }
      if (this.speed_limit != null) {
        data.speed_limit = this.speed_limit;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (typeof this.name === "string" && this.name.length) {
        writer.writeString(1, this.name);
      }
      if (this.polygon !== undefined) {
        writer.writeMessage(2, this.polygon, () => this.polygon.serialize(writer));
      }
      if (this.speed_limit !== undefined) {
        writer.writeDouble(3, this.speed_limit);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpeedControl {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new SpeedControl();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.name = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.polygon,
              () => (message.polygon = dependency_1.atlas.hdmap.Polygon.deserialize(reader)),
            );
            break;
          case 3:
            message.speed_limit = reader.readDouble();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): SpeedControl {
      return SpeedControl.deserialize(bytes);
    }
  }
  export class SpeedControls extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            speed_control: SpeedControl[];
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
      if (!Array.isArray(data) && typeof data == "object") {
        this.speed_control = data.speed_control;
      }
    }
    get speed_control() {
      return pb_1.Message.getRepeatedWrapperField(this, SpeedControl, 1);
    }
    set speed_control(value: SpeedControl[]) {
      pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
      speed_control: ReturnType<typeof SpeedControl.prototype.toObject>[];
    }) {
      const message = new SpeedControls({
        speed_control: data.speed_control.map((item) => SpeedControl.fromObject(item)),
      });
      return message;
    }
    toObject() {
      const data: {
        speed_control: ReturnType<typeof SpeedControl.prototype.toObject>[];
      } = {
        speed_control: this.speed_control.map((item: SpeedControl) => item.toObject()),
      };
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.speed_control !== undefined) {
        writer.writeRepeatedMessage(1, this.speed_control, (item: SpeedControl) =>
          item.serialize(writer),
        );
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpeedControls {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new SpeedControls();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(message.speed_control, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                1,
                SpeedControl.deserialize(reader),
                SpeedControl,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): SpeedControls {
      return SpeedControls.deserialize(bytes);
    }
  }
}
