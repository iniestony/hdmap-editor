// This Source Code Form is subject to the terms of the Mozilla Public
// License, v2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/

/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.1
 * source: map/map_signal.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";

import * as dependency_1 from "./../common/geometry";
import * as dependency_2 from "./map_geometry";
import * as dependency_3 from "./map_id";

export namespace atlas.hdmap {
  export class Subsignal extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            id?: dependency_3.atlas.hdmap.Id;
            type?: Subsignal.Type;
            location?: dependency_1.atlas.common.PointENU;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("id" in data && data.id != undefined) {
          this.id = data.id;
        }
        if ("type" in data && data.type != undefined) {
          this.type = data.type;
        }
        if ("location" in data && data.location != undefined) {
          this.location = data.location;
        }
      }
    }
    get id() {
      return pb_1.Message.getWrapperField(this, dependency_3.atlas.hdmap.Id, 1);
    }
    set id(value: dependency_3.atlas.hdmap.Id) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get type() {
      return pb_1.Message.getField(this, 2) as Subsignal.Type;
    }
    set type(value: Subsignal.Type) {
      pb_1.Message.setField(this, 2, value);
    }
    get location() {
      return pb_1.Message.getWrapperField(this, dependency_1.atlas.common.PointENU, 3);
    }
    set location(value: dependency_1.atlas.common.PointENU) {
      pb_1.Message.setWrapperField(this, 3, value);
    }
    static fromObject(data: {
      id?: ReturnType<typeof dependency_3.atlas.hdmap.Id.prototype.toObject>;
      type?: Subsignal.Type;
      location?: ReturnType<typeof dependency_1.atlas.common.PointENU.prototype.toObject>;
    }) {
      const message = new Subsignal({});
      if (data.id != null) {
        message.id = dependency_3.atlas.hdmap.Id.fromObject(data.id);
      }
      if (data.type != null) {
        message.type = data.type;
      }
      if (data.location != null) {
        message.location = dependency_1.atlas.common.PointENU.fromObject(data.location);
      }
      return message;
    }
    toObject() {
      const data: {
        id?: ReturnType<typeof dependency_3.atlas.hdmap.Id.prototype.toObject>;
        type?: Subsignal.Type;
        location?: ReturnType<typeof dependency_1.atlas.common.PointENU.prototype.toObject>;
      } = {};
      if (this.id != null) {
        data.id = this.id.toObject();
      }
      if (this.type != null) {
        data.type = this.type;
      }
      if (this.location != null) {
        data.location = this.location.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.id !== undefined) {
        writer.writeMessage(1, this.id, () => this.id.serialize(writer));
      }
      if (this.type !== undefined) {
        writer.writeEnum(2, this.type);
      }
      if (this.location !== undefined) {
        writer.writeMessage(3, this.location, () => this.location.serialize(writer));
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Subsignal {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new Subsignal();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.id,
              () => (message.id = dependency_3.atlas.hdmap.Id.deserialize(reader)),
            );
            break;
          case 2:
            message.type = reader.readEnum();
            break;
          case 3:
            reader.readMessage(
              message.location,
              () => (message.location = dependency_1.atlas.common.PointENU.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): Subsignal {
      return Subsignal.deserialize(bytes);
    }
  }
  export namespace Subsignal {
    export enum Type {
      UNKNOWN = 1,
      CIRCLE = 2,
      ARROW_LEFT = 3,
      ARROW_FORWARD = 4,
      ARROW_RIGHT = 5,
      ARROW_LEFT_AND_FORWARD = 6,
      ARROW_RIGHT_AND_FORWARD = 7,
      ARROW_U_TURN = 8,
    }
  }
  export class SignInfo extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            type?: SignInfo.Type;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("type" in data && data.type != undefined) {
          this.type = data.type;
        }
      }
    }
    get type() {
      return pb_1.Message.getField(this, 1) as SignInfo.Type;
    }
    set type(value: SignInfo.Type) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { type?: SignInfo.Type }) {
      const message = new SignInfo({});
      if (data.type != null) {
        message.type = data.type;
      }
      return message;
    }
    toObject() {
      const data: {
        type?: SignInfo.Type;
      } = {};
      if (this.type != null) {
        data.type = this.type;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.type !== undefined) {
        writer.writeEnum(1, this.type);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignInfo {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new SignInfo();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.type = reader.readEnum();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): SignInfo {
      return SignInfo.deserialize(bytes);
    }
  }
  export namespace SignInfo {
    export enum Type {
      None = 0,
      NO_RIGHT_TURN_ON_RED = 1,
    }
  }
  export class Signal extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            id?: dependency_3.atlas.hdmap.Id;
            boundary?: dependency_2.atlas.hdmap.Polygon;
            subsignal: Subsignal[];
            overlap_id: dependency_3.atlas.hdmap.Id[];
            type?: Signal.Type;
            stop_line: dependency_2.atlas.hdmap.Curve[];
            sign_info: SignInfo[];
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 6, 7], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("id" in data && data.id != undefined) {
          this.id = data.id;
        }
        if ("boundary" in data && data.boundary != undefined) {
          this.boundary = data.boundary;
        }
        this.subsignal = data.subsignal;
        this.overlap_id = data.overlap_id;
        if ("type" in data && data.type != undefined) {
          this.type = data.type;
        }
        this.stop_line = data.stop_line;
        this.sign_info = data.sign_info;
      }
    }
    get id() {
      return pb_1.Message.getWrapperField(this, dependency_3.atlas.hdmap.Id, 1);
    }
    set id(value: dependency_3.atlas.hdmap.Id) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get boundary() {
      return pb_1.Message.getWrapperField(this, dependency_2.atlas.hdmap.Polygon, 2);
    }
    set boundary(value: dependency_2.atlas.hdmap.Polygon) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get subsignal() {
      return pb_1.Message.getRepeatedWrapperField(this, Subsignal, 3);
    }
    set subsignal(value: Subsignal[]) {
      pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get overlap_id() {
      return pb_1.Message.getRepeatedWrapperField(this, dependency_3.atlas.hdmap.Id, 4);
    }
    set overlap_id(value: dependency_3.atlas.hdmap.Id[]) {
      pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    get type() {
      return pb_1.Message.getField(this, 5) as Signal.Type;
    }
    set type(value: Signal.Type) {
      pb_1.Message.setField(this, 5, value);
    }
    get stop_line() {
      return pb_1.Message.getRepeatedWrapperField(this, dependency_2.atlas.hdmap.Curve, 6);
    }
    set stop_line(value: dependency_2.atlas.hdmap.Curve[]) {
      pb_1.Message.setRepeatedWrapperField(this, 6, value);
    }
    get sign_info() {
      return pb_1.Message.getRepeatedWrapperField(this, SignInfo, 7);
    }
    set sign_info(value: SignInfo[]) {
      pb_1.Message.setRepeatedWrapperField(this, 7, value);
    }
    static fromObject(data: {
      id?: ReturnType<typeof dependency_3.atlas.hdmap.Id.prototype.toObject>;
      boundary?: ReturnType<typeof dependency_2.atlas.hdmap.Polygon.prototype.toObject>;
      subsignal: ReturnType<typeof Subsignal.prototype.toObject>[];
      overlap_id: ReturnType<typeof dependency_3.atlas.hdmap.Id.prototype.toObject>[];
      type?: Signal.Type;
      stop_line: ReturnType<typeof dependency_2.atlas.hdmap.Curve.prototype.toObject>[];
      sign_info: ReturnType<typeof SignInfo.prototype.toObject>[];
    }) {
      const message = new Signal({
        subsignal: data.subsignal.map((item) => Subsignal.fromObject(item)),
        overlap_id: data.overlap_id.map((item) => dependency_3.atlas.hdmap.Id.fromObject(item)),
        stop_line: data.stop_line.map((item) => dependency_2.atlas.hdmap.Curve.fromObject(item)),
        sign_info: data.sign_info.map((item) => SignInfo.fromObject(item)),
      });
      if (data.id != null) {
        message.id = dependency_3.atlas.hdmap.Id.fromObject(data.id);
      }
      if (data.boundary != null) {
        message.boundary = dependency_2.atlas.hdmap.Polygon.fromObject(data.boundary);
      }
      if (data.type != null) {
        message.type = data.type;
      }
      return message;
    }
    toObject() {
      const data: {
        id?: ReturnType<typeof dependency_3.atlas.hdmap.Id.prototype.toObject>;
        boundary?: ReturnType<typeof dependency_2.atlas.hdmap.Polygon.prototype.toObject>;
        subsignal: ReturnType<typeof Subsignal.prototype.toObject>[];
        overlap_id: ReturnType<typeof dependency_3.atlas.hdmap.Id.prototype.toObject>[];
        type?: Signal.Type;
        stop_line: ReturnType<typeof dependency_2.atlas.hdmap.Curve.prototype.toObject>[];
        sign_info: ReturnType<typeof SignInfo.prototype.toObject>[];
      } = {
        subsignal: this.subsignal.map((item: Subsignal) => item.toObject()),
        overlap_id: this.overlap_id.map((item: dependency_3.atlas.hdmap.Id) => item.toObject()),
        stop_line: this.stop_line.map((item: dependency_2.atlas.hdmap.Curve) => item.toObject()),
        sign_info: this.sign_info.map((item: SignInfo) => item.toObject()),
      };
      if (this.id != null) {
        data.id = this.id.toObject();
      }
      if (this.boundary != null) {
        data.boundary = this.boundary.toObject();
      }
      if (this.type != null) {
        data.type = this.type;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.id !== undefined) {
        writer.writeMessage(1, this.id, () => this.id.serialize(writer));
      }
      if (this.boundary !== undefined) {
        writer.writeMessage(2, this.boundary, () => this.boundary.serialize(writer));
      }
      if (this.subsignal !== undefined) {
        writer.writeRepeatedMessage(3, this.subsignal, (item: Subsignal) => item.serialize(writer));
      }
      if (this.overlap_id !== undefined) {
        writer.writeRepeatedMessage(4, this.overlap_id, (item: dependency_3.atlas.hdmap.Id) =>
          item.serialize(writer),
        );
      }
      if (this.type !== undefined) {
        writer.writeEnum(5, this.type);
      }
      if (this.stop_line !== undefined) {
        writer.writeRepeatedMessage(6, this.stop_line, (item: dependency_2.atlas.hdmap.Curve) =>
          item.serialize(writer),
        );
      }
      if (this.sign_info !== undefined) {
        writer.writeRepeatedMessage(7, this.sign_info, (item: SignInfo) => item.serialize(writer));
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Signal {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new Signal();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.id,
              () => (message.id = dependency_3.atlas.hdmap.Id.deserialize(reader)),
            );
            break;
          case 2:
            reader.readMessage(
              message.boundary,
              () => (message.boundary = dependency_2.atlas.hdmap.Polygon.deserialize(reader)),
            );
            break;
          case 3:
            reader.readMessage(message.subsignal, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                3,
                Subsignal.deserialize(reader),
                Subsignal,
              ),
            );
            break;
          case 4:
            reader.readMessage(message.overlap_id, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                4,
                dependency_3.atlas.hdmap.Id.deserialize(reader),
                dependency_3.atlas.hdmap.Id,
              ),
            );
            break;
          case 5:
            message.type = reader.readEnum();
            break;
          case 6:
            reader.readMessage(message.stop_line, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                6,
                dependency_2.atlas.hdmap.Curve.deserialize(reader),
                dependency_2.atlas.hdmap.Curve,
              ),
            );
            break;
          case 7:
            reader.readMessage(message.sign_info, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                7,
                SignInfo.deserialize(reader),
                SignInfo,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): Signal {
      return Signal.deserialize(bytes);
    }
  }
  export namespace Signal {
    export enum Type {
      UNKNOWN = 1,
      MIX_2_HORIZONTAL = 2,
      MIX_2_VERTICAL = 3,
      MIX_3_HORIZONTAL = 4,
      MIX_3_VERTICAL = 5,
      SINGLE = 6,
    }
  }
}
