// This Source Code Form is subject to the terms of the Mozilla Public
// License, v2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/

/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.1
 * source: map/map_id.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";

export namespace atlas.hdmap {
  export class Id extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            id?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("id" in data && data.id != undefined) {
          this.id = data.id;
        }
      }
    }
    get id() {
      return pb_1.Message.getField(this, 1) as string;
    }
    set id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { id?: string }) {
      const message = new Id({});
      if (data.id != null) {
        message.id = data.id;
      }
      return message;
    }
    toObject() {
      const data: {
        id?: string;
      } = {};
      if (this.id != null) {
        data.id = this.id;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (typeof this.id === "string" && this.id.length) {
        writer.writeString(1, this.id);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Id {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new Id();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.id = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): Id {
      return Id.deserialize(bytes);
    }
  }
}
