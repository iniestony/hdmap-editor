// This Source Code Form is subject to the terms of the Mozilla Public
// License, v2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/

/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: modules/map/proto/map_crosswalk.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";

import * as dependency_1 from "./map_geometry";
import * as dependency_2 from "./map_id";

export namespace atlas.hdmap {
  export class Zebra extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            line_segment: dependency_1.atlas.hdmap.LineSegment[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        this.line_segment = data.line_segment;
      }
    }
    get line_segment() {
      return pb_1.Message.getRepeatedWrapperField(this, dependency_1.atlas.hdmap.LineSegment, 1);
    }
    set line_segment(value: dependency_1.atlas.hdmap.LineSegment[]) {
      pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
      line_segment: ReturnType<typeof dependency_1.atlas.hdmap.LineSegment.prototype.toObject>[];
    }): Zebra {
      const message = new Zebra({
        line_segment: data.line_segment.map((item) =>
          dependency_1.atlas.hdmap.LineSegment.fromObject(item),
        ),
      });
      return message;
    }
    toObject() {
      const data: {
        line_segment?: ReturnType<typeof dependency_1.atlas.hdmap.LineSegment.prototype.toObject>[];
      } = {};
      if (this.line_segment != null) {
        data.line_segment = this.line_segment.map((item: dependency_1.atlas.hdmap.LineSegment) =>
          item.toObject(),
        );
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.line_segment.length > 0) {
        writer.writeRepeatedMessage(
          1,
          this.line_segment,
          (item: dependency_1.atlas.hdmap.LineSegment) => item.serialize(writer),
        );
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Zebra {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new Zebra();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(message.line_segment, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                1,
                dependency_1.atlas.hdmap.LineSegment.deserialize(reader),
                dependency_1.atlas.hdmap.LineSegment,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Zebra {
      return Zebra.deserialize(bytes);
    }
  }
  export class Crosswalk extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            id?: dependency_2.atlas.hdmap.Id;
            polygon?: dependency_1.atlas.hdmap.Polygon;
            overlap_id: dependency_2.atlas.hdmap.Id[];
            zebra?: Zebra;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [3],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("id" in data && data.id != undefined) {
          this.id = data.id;
        }
        if ("polygon" in data && data.polygon != undefined) {
          this.polygon = data.polygon;
        }
        this.overlap_id = data.overlap_id;
        if ("zebra" in data && data.zebra != undefined) {
          this.zebra = data.zebra;
        }
      }
    }
    get id() {
      return pb_1.Message.getWrapperField(this, dependency_2.atlas.hdmap.Id, 1);
    }
    set id(value: dependency_2.atlas.hdmap.Id) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_id() {
      return pb_1.Message.getField(this, 1) != null;
    }
    get polygon() {
      return pb_1.Message.getWrapperField(this, dependency_1.atlas.hdmap.Polygon, 2);
    }
    set polygon(value: dependency_1.atlas.hdmap.Polygon) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_polygon() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get overlap_id() {
      return pb_1.Message.getRepeatedWrapperField(this, dependency_2.atlas.hdmap.Id, 3);
    }
    set overlap_id(value: dependency_2.atlas.hdmap.Id[]) {
      pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get zebra() {
      return pb_1.Message.getWrapperField(this, Zebra, 4);
    }
    set zebra(value: Zebra) {
      pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_zebra() {
      return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
      id?: ReturnType<typeof dependency_2.atlas.hdmap.Id.prototype.toObject>;
      polygon?: ReturnType<typeof dependency_1.atlas.hdmap.Polygon.prototype.toObject>;
      overlap_id?: ReturnType<typeof dependency_2.atlas.hdmap.Id.prototype.toObject>[];
      zebra?: ReturnType<typeof Zebra.prototype.toObject>;
    }): Crosswalk {
      const message = data.overlap_id
        ? new Crosswalk({
            overlap_id: data.overlap_id.map((item) => dependency_2.atlas.hdmap.Id.fromObject(item)),
          })
        : new Crosswalk();
      if (data.id != null) {
        message.id = dependency_2.atlas.hdmap.Id.fromObject(data.id);
      }
      if (data.polygon != null) {
        message.polygon = dependency_1.atlas.hdmap.Polygon.fromObject(data.polygon);
      }
      if (data.zebra != null) {
        message.zebra = Zebra.fromObject(
          data.zebra as unknown as {
            line_segment: ReturnType<
              typeof dependency_1.atlas.hdmap.LineSegment.prototype.toObject
            >[];
          },
        );
      }
      return message;
    }
    toObject() {
      const data: {
        id?: ReturnType<typeof dependency_2.atlas.hdmap.Id.prototype.toObject>;
        polygon?: ReturnType<typeof dependency_1.atlas.hdmap.Polygon.prototype.toObject>;
        overlap_id?: ReturnType<typeof dependency_2.atlas.hdmap.Id.prototype.toObject>[];
        zebra?: ReturnType<typeof Zebra.prototype.toObject>;
      } = {};
      if (this.id != null) {
        data.id = this.id.toObject();
      }
      if (this.polygon != null) {
        data.polygon = this.polygon.toObject();
      }
      if (this.overlap_id != null) {
        data.overlap_id = this.overlap_id.map((item: dependency_2.atlas.hdmap.Id) =>
          item.toObject(),
        );
      }
      if (this.zebra != null) {
        data.zebra = this.zebra.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.has_id) {
        writer.writeMessage(1, this.id, () => this.id.serialize(writer));
      }
      if (this.has_polygon) {
        writer.writeMessage(2, this.polygon, () => this.polygon.serialize(writer));
      }
      if (this.overlap_id.length > 0) {
        writer.writeRepeatedMessage(3, this.overlap_id, (item: dependency_2.atlas.hdmap.Id) =>
          item.serialize(writer),
        );
      }
      if (this.has_zebra) {
        writer.writeMessage(4, this.zebra, () => this.zebra.serialize(writer));
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Crosswalk {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new Crosswalk();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.id,
              () => (message.id = dependency_2.atlas.hdmap.Id.deserialize(reader)),
            );
            break;
          case 2:
            reader.readMessage(
              message.polygon,
              () => (message.polygon = dependency_1.atlas.hdmap.Polygon.deserialize(reader)),
            );
            break;
          case 3:
            reader.readMessage(message.overlap_id, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                3,
                dependency_2.atlas.hdmap.Id.deserialize(reader),
                dependency_2.atlas.hdmap.Id,
              ),
            );
            break;
          case 4:
            reader.readMessage(message.zebra, () => (message.zebra = Zebra.deserialize(reader)));
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Crosswalk {
      return Crosswalk.deserialize(bytes);
    }
  }
}
