// This Source Code Form is subject to the terms of the Mozilla Public
// License, v2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/

/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.1
 * source: common/drive_state.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";

export namespace atlas.common {
  export class EngageAdvice extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            advice?: EngageAdvice.Advice;
            reason?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("advice" in data && data.advice != undefined) {
          this.advice = data.advice;
        }
        if ("reason" in data && data.reason != undefined) {
          this.reason = data.reason;
        }
      }
    }
    get advice() {
      return pb_1.Message.getFieldWithDefault(
        this,
        1,
        EngageAdvice.Advice.DISALLOW_ENGAGE,
      ) as EngageAdvice.Advice;
    }
    set advice(value: EngageAdvice.Advice) {
      pb_1.Message.setField(this, 1, value);
    }
    get reason() {
      return pb_1.Message.getField(this, 2) as string;
    }
    set reason(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: { advice?: EngageAdvice.Advice; reason?: string }) {
      const message = new EngageAdvice({});
      if (data.advice != null) {
        message.advice = data.advice;
      }
      if (data.reason != null) {
        message.reason = data.reason;
      }
      return message;
    }
    toObject() {
      const data: {
        advice?: EngageAdvice.Advice;
        reason?: string;
      } = {};
      if (this.advice != null) {
        data.advice = this.advice;
      }
      if (this.reason != null) {
        data.reason = this.reason;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.advice !== undefined) {
        writer.writeEnum(1, this.advice);
      }
      if (typeof this.reason === "string" && this.reason.length) {
        writer.writeString(2, this.reason);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EngageAdvice {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new EngageAdvice();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.advice = reader.readEnum();
            break;
          case 2:
            message.reason = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): EngageAdvice {
      return EngageAdvice.deserialize(bytes);
    }
  }
  export namespace EngageAdvice {
    export enum Advice {
      UNKNOWN = 0,
      DISALLOW_ENGAGE = 1,
      READY_TO_ENGAGE = 2,
      KEEP_ENGAGED = 3,
      PREPARE_DISENGAGE = 4,
    }
  }
}
