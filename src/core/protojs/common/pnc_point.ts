// This Source Code Form is subject to the terms of the Mozilla Public
// License, v2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/

/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.1
 * source: common/pnc_point.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";

export namespace atlas.common {
  export class SLPoint extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            s?: number;
            l?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("s" in data && data.s != undefined) {
          this.s = data.s;
        }
        if ("l" in data && data.l != undefined) {
          this.l = data.l;
        }
      }
    }
    get s() {
      return pb_1.Message.getField(this, 1) as number;
    }
    set s(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get l() {
      return pb_1.Message.getField(this, 2) as number;
    }
    set l(value: number) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: { s?: number; l?: number }) {
      const message = new SLPoint({});
      if (data.s != null) {
        message.s = data.s;
      }
      if (data.l != null) {
        message.l = data.l;
      }
      return message;
    }
    toObject() {
      const data: {
        s?: number;
        l?: number;
      } = {};
      if (this.s != null) {
        data.s = this.s;
      }
      if (this.l != null) {
        data.l = this.l;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.s !== undefined) {
        writer.writeDouble(1, this.s);
      }
      if (this.l !== undefined) {
        writer.writeDouble(2, this.l);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SLPoint {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new SLPoint();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.s = reader.readDouble();
            break;
          case 2:
            message.l = reader.readDouble();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): SLPoint {
      return SLPoint.deserialize(bytes);
    }
  }
  export class FrenetFramePoint extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            s?: number;
            l?: number;
            dl?: number;
            ddl?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("s" in data && data.s != undefined) {
          this.s = data.s;
        }
        if ("l" in data && data.l != undefined) {
          this.l = data.l;
        }
        if ("dl" in data && data.dl != undefined) {
          this.dl = data.dl;
        }
        if ("ddl" in data && data.ddl != undefined) {
          this.ddl = data.ddl;
        }
      }
    }
    get s() {
      return pb_1.Message.getField(this, 1) as number;
    }
    set s(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get l() {
      return pb_1.Message.getField(this, 2) as number;
    }
    set l(value: number) {
      pb_1.Message.setField(this, 2, value);
    }
    get dl() {
      return pb_1.Message.getField(this, 3) as number;
    }
    set dl(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    get ddl() {
      return pb_1.Message.getField(this, 4) as number;
    }
    set ddl(value: number) {
      pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: { s?: number; l?: number; dl?: number; ddl?: number }) {
      const message = new FrenetFramePoint({});
      if (data.s != null) {
        message.s = data.s;
      }
      if (data.l != null) {
        message.l = data.l;
      }
      if (data.dl != null) {
        message.dl = data.dl;
      }
      if (data.ddl != null) {
        message.ddl = data.ddl;
      }
      return message;
    }
    toObject() {
      const data: {
        s?: number;
        l?: number;
        dl?: number;
        ddl?: number;
      } = {};
      if (this.s != null) {
        data.s = this.s;
      }
      if (this.l != null) {
        data.l = this.l;
      }
      if (this.dl != null) {
        data.dl = this.dl;
      }
      if (this.ddl != null) {
        data.ddl = this.ddl;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.s !== undefined) {
        writer.writeDouble(1, this.s);
      }
      if (this.l !== undefined) {
        writer.writeDouble(2, this.l);
      }
      if (this.dl !== undefined) {
        writer.writeDouble(3, this.dl);
      }
      if (this.ddl !== undefined) {
        writer.writeDouble(4, this.ddl);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FrenetFramePoint {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new FrenetFramePoint();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.s = reader.readDouble();
            break;
          case 2:
            message.l = reader.readDouble();
            break;
          case 3:
            message.dl = reader.readDouble();
            break;
          case 4:
            message.ddl = reader.readDouble();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): FrenetFramePoint {
      return FrenetFramePoint.deserialize(bytes);
    }
  }
  export class SpeedPoint extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            s?: number;
            t?: number;
            v?: number;
            a?: number;
            da?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("s" in data && data.s != undefined) {
          this.s = data.s;
        }
        if ("t" in data && data.t != undefined) {
          this.t = data.t;
        }
        if ("v" in data && data.v != undefined) {
          this.v = data.v;
        }
        if ("a" in data && data.a != undefined) {
          this.a = data.a;
        }
        if ("da" in data && data.da != undefined) {
          this.da = data.da;
        }
      }
    }
    get s() {
      return pb_1.Message.getField(this, 1) as number;
    }
    set s(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get t() {
      return pb_1.Message.getField(this, 2) as number;
    }
    set t(value: number) {
      pb_1.Message.setField(this, 2, value);
    }
    get v() {
      return pb_1.Message.getField(this, 3) as number;
    }
    set v(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    get a() {
      return pb_1.Message.getField(this, 4) as number;
    }
    set a(value: number) {
      pb_1.Message.setField(this, 4, value);
    }
    get da() {
      return pb_1.Message.getField(this, 5) as number;
    }
    set da(value: number) {
      pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: { s?: number; t?: number; v?: number; a?: number; da?: number }) {
      const message = new SpeedPoint({});
      if (data.s != null) {
        message.s = data.s;
      }
      if (data.t != null) {
        message.t = data.t;
      }
      if (data.v != null) {
        message.v = data.v;
      }
      if (data.a != null) {
        message.a = data.a;
      }
      if (data.da != null) {
        message.da = data.da;
      }
      return message;
    }
    toObject() {
      const data: {
        s?: number;
        t?: number;
        v?: number;
        a?: number;
        da?: number;
      } = {};
      if (this.s != null) {
        data.s = this.s;
      }
      if (this.t != null) {
        data.t = this.t;
      }
      if (this.v != null) {
        data.v = this.v;
      }
      if (this.a != null) {
        data.a = this.a;
      }
      if (this.da != null) {
        data.da = this.da;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.s !== undefined) {
        writer.writeDouble(1, this.s);
      }
      if (this.t !== undefined) {
        writer.writeDouble(2, this.t);
      }
      if (this.v !== undefined) {
        writer.writeDouble(3, this.v);
      }
      if (this.a !== undefined) {
        writer.writeDouble(4, this.a);
      }
      if (this.da !== undefined) {
        writer.writeDouble(5, this.da);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpeedPoint {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new SpeedPoint();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.s = reader.readDouble();
            break;
          case 2:
            message.t = reader.readDouble();
            break;
          case 3:
            message.v = reader.readDouble();
            break;
          case 4:
            message.a = reader.readDouble();
            break;
          case 5:
            message.da = reader.readDouble();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): SpeedPoint {
      return SpeedPoint.deserialize(bytes);
    }
  }
  export class PathPoint extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            x?: number;
            y?: number;
            z?: number;
            theta?: number;
            kappa?: number;
            s?: number;
            dkappa?: number;
            ddkappa?: number;
            lane_id?: string;
            x_derivative?: number;
            y_derivative?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("x" in data && data.x != undefined) {
          this.x = data.x;
        }
        if ("y" in data && data.y != undefined) {
          this.y = data.y;
        }
        if ("z" in data && data.z != undefined) {
          this.z = data.z;
        }
        if ("theta" in data && data.theta != undefined) {
          this.theta = data.theta;
        }
        if ("kappa" in data && data.kappa != undefined) {
          this.kappa = data.kappa;
        }
        if ("s" in data && data.s != undefined) {
          this.s = data.s;
        }
        if ("dkappa" in data && data.dkappa != undefined) {
          this.dkappa = data.dkappa;
        }
        if ("ddkappa" in data && data.ddkappa != undefined) {
          this.ddkappa = data.ddkappa;
        }
        if ("lane_id" in data && data.lane_id != undefined) {
          this.lane_id = data.lane_id;
        }
        if ("x_derivative" in data && data.x_derivative != undefined) {
          this.x_derivative = data.x_derivative;
        }
        if ("y_derivative" in data && data.y_derivative != undefined) {
          this.y_derivative = data.y_derivative;
        }
      }
    }
    get x() {
      return pb_1.Message.getField(this, 1) as number;
    }
    set x(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get y() {
      return pb_1.Message.getField(this, 2) as number;
    }
    set y(value: number) {
      pb_1.Message.setField(this, 2, value);
    }
    get z() {
      return pb_1.Message.getField(this, 3) as number;
    }
    set z(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    get theta() {
      return pb_1.Message.getField(this, 4) as number;
    }
    set theta(value: number) {
      pb_1.Message.setField(this, 4, value);
    }
    get kappa() {
      return pb_1.Message.getField(this, 5) as number;
    }
    set kappa(value: number) {
      pb_1.Message.setField(this, 5, value);
    }
    get s() {
      return pb_1.Message.getField(this, 6) as number;
    }
    set s(value: number) {
      pb_1.Message.setField(this, 6, value);
    }
    get dkappa() {
      return pb_1.Message.getField(this, 7) as number;
    }
    set dkappa(value: number) {
      pb_1.Message.setField(this, 7, value);
    }
    get ddkappa() {
      return pb_1.Message.getField(this, 8) as number;
    }
    set ddkappa(value: number) {
      pb_1.Message.setField(this, 8, value);
    }
    get lane_id() {
      return pb_1.Message.getField(this, 9) as string;
    }
    set lane_id(value: string) {
      pb_1.Message.setField(this, 9, value);
    }
    get x_derivative() {
      return pb_1.Message.getField(this, 10) as number;
    }
    set x_derivative(value: number) {
      pb_1.Message.setField(this, 10, value);
    }
    get y_derivative() {
      return pb_1.Message.getField(this, 11) as number;
    }
    set y_derivative(value: number) {
      pb_1.Message.setField(this, 11, value);
    }
    static fromObject(data: {
      x?: number;
      y?: number;
      z?: number;
      theta?: number;
      kappa?: number;
      s?: number;
      dkappa?: number;
      ddkappa?: number;
      lane_id?: string;
      x_derivative?: number;
      y_derivative?: number;
    }) {
      const message = new PathPoint({});
      if (data.x != null) {
        message.x = data.x;
      }
      if (data.y != null) {
        message.y = data.y;
      }
      if (data.z != null) {
        message.z = data.z;
      }
      if (data.theta != null) {
        message.theta = data.theta;
      }
      if (data.kappa != null) {
        message.kappa = data.kappa;
      }
      if (data.s != null) {
        message.s = data.s;
      }
      if (data.dkappa != null) {
        message.dkappa = data.dkappa;
      }
      if (data.ddkappa != null) {
        message.ddkappa = data.ddkappa;
      }
      if (data.lane_id != null) {
        message.lane_id = data.lane_id;
      }
      if (data.x_derivative != null) {
        message.x_derivative = data.x_derivative;
      }
      if (data.y_derivative != null) {
        message.y_derivative = data.y_derivative;
      }
      return message;
    }
    toObject() {
      const data: {
        x?: number;
        y?: number;
        z?: number;
        theta?: number;
        kappa?: number;
        s?: number;
        dkappa?: number;
        ddkappa?: number;
        lane_id?: string;
        x_derivative?: number;
        y_derivative?: number;
      } = {};
      if (this.x != null) {
        data.x = this.x;
      }
      if (this.y != null) {
        data.y = this.y;
      }
      if (this.z != null) {
        data.z = this.z;
      }
      if (this.theta != null) {
        data.theta = this.theta;
      }
      if (this.kappa != null) {
        data.kappa = this.kappa;
      }
      if (this.s != null) {
        data.s = this.s;
      }
      if (this.dkappa != null) {
        data.dkappa = this.dkappa;
      }
      if (this.ddkappa != null) {
        data.ddkappa = this.ddkappa;
      }
      if (this.lane_id != null) {
        data.lane_id = this.lane_id;
      }
      if (this.x_derivative != null) {
        data.x_derivative = this.x_derivative;
      }
      if (this.y_derivative != null) {
        data.y_derivative = this.y_derivative;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.x !== undefined) {
        writer.writeDouble(1, this.x);
      }
      if (this.y !== undefined) {
        writer.writeDouble(2, this.y);
      }
      if (this.z !== undefined) {
        writer.writeDouble(3, this.z);
      }
      if (this.theta !== undefined) {
        writer.writeDouble(4, this.theta);
      }
      if (this.kappa !== undefined) {
        writer.writeDouble(5, this.kappa);
      }
      if (this.s !== undefined) {
        writer.writeDouble(6, this.s);
      }
      if (this.dkappa !== undefined) {
        writer.writeDouble(7, this.dkappa);
      }
      if (this.ddkappa !== undefined) {
        writer.writeDouble(8, this.ddkappa);
      }
      if (typeof this.lane_id === "string" && this.lane_id.length) {
        writer.writeString(9, this.lane_id);
      }
      if (this.x_derivative !== undefined) {
        writer.writeDouble(10, this.x_derivative);
      }
      if (this.y_derivative !== undefined) {
        writer.writeDouble(11, this.y_derivative);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PathPoint {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new PathPoint();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.x = reader.readDouble();
            break;
          case 2:
            message.y = reader.readDouble();
            break;
          case 3:
            message.z = reader.readDouble();
            break;
          case 4:
            message.theta = reader.readDouble();
            break;
          case 5:
            message.kappa = reader.readDouble();
            break;
          case 6:
            message.s = reader.readDouble();
            break;
          case 7:
            message.dkappa = reader.readDouble();
            break;
          case 8:
            message.ddkappa = reader.readDouble();
            break;
          case 9:
            message.lane_id = reader.readString();
            break;
          case 10:
            message.x_derivative = reader.readDouble();
            break;
          case 11:
            message.y_derivative = reader.readDouble();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): PathPoint {
      return PathPoint.deserialize(bytes);
    }
  }
  export class Path extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            name?: string;
            path_point: PathPoint[];
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("name" in data && data.name != undefined) {
          this.name = data.name;
        }
        this.path_point = data.path_point;
      }
    }
    get name() {
      return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get path_point() {
      return pb_1.Message.getRepeatedWrapperField(this, PathPoint, 2);
    }
    set path_point(value: PathPoint[]) {
      pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
      name?: string;
      path_point: ReturnType<typeof PathPoint.prototype.toObject>[];
    }) {
      const message = new Path({
        path_point: data.path_point.map((item) => PathPoint.fromObject(item)),
      });
      if (data.name != null) {
        message.name = data.name;
      }
      return message;
    }
    toObject() {
      const data: {
        name?: string;
        path_point: ReturnType<typeof PathPoint.prototype.toObject>[];
      } = {
        path_point: this.path_point.map((item: PathPoint) => item.toObject()),
      };
      if (this.name != null) {
        data.name = this.name;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (typeof this.name === "string" && this.name.length) {
        writer.writeString(1, this.name);
      }
      if (this.path_point !== undefined) {
        writer.writeRepeatedMessage(2, this.path_point, (item: PathPoint) =>
          item.serialize(writer),
        );
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Path {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new Path();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.name = reader.readString();
            break;
          case 2:
            reader.readMessage(message.path_point, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                2,
                PathPoint.deserialize(reader),
                PathPoint,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): Path {
      return Path.deserialize(bytes);
    }
  }
  export class TrajectoryPoint extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            path_point?: PathPoint;
            v?: number;
            a?: number;
            relative_time?: number;
            da?: number;
            steer?: number;
            gaussian_info?: GaussianInfo;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("path_point" in data && data.path_point != undefined) {
          this.path_point = data.path_point;
        }
        if ("v" in data && data.v != undefined) {
          this.v = data.v;
        }
        if ("a" in data && data.a != undefined) {
          this.a = data.a;
        }
        if ("relative_time" in data && data.relative_time != undefined) {
          this.relative_time = data.relative_time;
        }
        if ("da" in data && data.da != undefined) {
          this.da = data.da;
        }
        if ("steer" in data && data.steer != undefined) {
          this.steer = data.steer;
        }
        if ("gaussian_info" in data && data.gaussian_info != undefined) {
          this.gaussian_info = data.gaussian_info;
        }
      }
    }
    get path_point() {
      return pb_1.Message.getWrapperField(this, PathPoint, 1);
    }
    set path_point(value: PathPoint) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get v() {
      return pb_1.Message.getField(this, 2) as number;
    }
    set v(value: number) {
      pb_1.Message.setField(this, 2, value);
    }
    get a() {
      return pb_1.Message.getField(this, 3) as number;
    }
    set a(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    get relative_time() {
      return pb_1.Message.getField(this, 4) as number;
    }
    set relative_time(value: number) {
      pb_1.Message.setField(this, 4, value);
    }
    get da() {
      return pb_1.Message.getField(this, 5) as number;
    }
    set da(value: number) {
      pb_1.Message.setField(this, 5, value);
    }
    get steer() {
      return pb_1.Message.getField(this, 6) as number;
    }
    set steer(value: number) {
      pb_1.Message.setField(this, 6, value);
    }
    get gaussian_info() {
      return pb_1.Message.getWrapperField(this, GaussianInfo, 7);
    }
    set gaussian_info(value: GaussianInfo) {
      pb_1.Message.setWrapperField(this, 7, value);
    }
    static fromObject(data: {
      path_point?: ReturnType<typeof PathPoint.prototype.toObject>;
      v?: number;
      a?: number;
      relative_time?: number;
      da?: number;
      steer?: number;
      gaussian_info?: ReturnType<typeof GaussianInfo.prototype.toObject>;
    }) {
      const message = new TrajectoryPoint({});
      if (data.path_point != null) {
        message.path_point = PathPoint.fromObject(data.path_point);
      }
      if (data.v != null) {
        message.v = data.v;
      }
      if (data.a != null) {
        message.a = data.a;
      }
      if (data.relative_time != null) {
        message.relative_time = data.relative_time;
      }
      if (data.da != null) {
        message.da = data.da;
      }
      if (data.steer != null) {
        message.steer = data.steer;
      }
      if (data.gaussian_info != null) {
        message.gaussian_info = GaussianInfo.fromObject(data.gaussian_info);
      }
      return message;
    }
    toObject() {
      const data: {
        path_point?: ReturnType<typeof PathPoint.prototype.toObject>;
        v?: number;
        a?: number;
        relative_time?: number;
        da?: number;
        steer?: number;
        gaussian_info?: ReturnType<typeof GaussianInfo.prototype.toObject>;
      } = {};
      if (this.path_point != null) {
        data.path_point = this.path_point.toObject();
      }
      if (this.v != null) {
        data.v = this.v;
      }
      if (this.a != null) {
        data.a = this.a;
      }
      if (this.relative_time != null) {
        data.relative_time = this.relative_time;
      }
      if (this.da != null) {
        data.da = this.da;
      }
      if (this.steer != null) {
        data.steer = this.steer;
      }
      if (this.gaussian_info != null) {
        data.gaussian_info = this.gaussian_info.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.path_point !== undefined) {
        writer.writeMessage(1, this.path_point, () => this.path_point.serialize(writer));
      }
      if (this.v !== undefined) {
        writer.writeDouble(2, this.v);
      }
      if (this.a !== undefined) {
        writer.writeDouble(3, this.a);
      }
      if (this.relative_time !== undefined) {
        writer.writeDouble(4, this.relative_time);
      }
      if (this.da !== undefined) {
        writer.writeDouble(5, this.da);
      }
      if (this.steer !== undefined) {
        writer.writeDouble(6, this.steer);
      }
      if (this.gaussian_info !== undefined) {
        writer.writeMessage(7, this.gaussian_info, () => this.gaussian_info.serialize(writer));
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrajectoryPoint {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new TrajectoryPoint();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.path_point,
              () => (message.path_point = PathPoint.deserialize(reader)),
            );
            break;
          case 2:
            message.v = reader.readDouble();
            break;
          case 3:
            message.a = reader.readDouble();
            break;
          case 4:
            message.relative_time = reader.readDouble();
            break;
          case 5:
            message.da = reader.readDouble();
            break;
          case 6:
            message.steer = reader.readDouble();
            break;
          case 7:
            reader.readMessage(
              message.gaussian_info,
              () => (message.gaussian_info = GaussianInfo.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): TrajectoryPoint {
      return TrajectoryPoint.deserialize(bytes);
    }
  }
  export class Trajectory extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            name?: string;
            trajectory_point: TrajectoryPoint[];
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("name" in data && data.name != undefined) {
          this.name = data.name;
        }
        this.trajectory_point = data.trajectory_point;
      }
    }
    get name() {
      return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get trajectory_point() {
      return pb_1.Message.getRepeatedWrapperField(this, TrajectoryPoint, 2);
    }
    set trajectory_point(value: TrajectoryPoint[]) {
      pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
      name?: string;
      trajectory_point: ReturnType<typeof TrajectoryPoint.prototype.toObject>[];
    }) {
      const message = new Trajectory({
        trajectory_point: data.trajectory_point.map((item) => TrajectoryPoint.fromObject(item)),
      });
      if (data.name != null) {
        message.name = data.name;
      }
      return message;
    }
    toObject() {
      const data: {
        name?: string;
        trajectory_point: ReturnType<typeof TrajectoryPoint.prototype.toObject>[];
      } = {
        trajectory_point: this.trajectory_point.map((item: TrajectoryPoint) => item.toObject()),
      };
      if (this.name != null) {
        data.name = this.name;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (typeof this.name === "string" && this.name.length) {
        writer.writeString(1, this.name);
      }
      if (this.trajectory_point !== undefined) {
        writer.writeRepeatedMessage(2, this.trajectory_point, (item: TrajectoryPoint) =>
          item.serialize(writer),
        );
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Trajectory {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new Trajectory();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.name = reader.readString();
            break;
          case 2:
            reader.readMessage(message.trajectory_point, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                2,
                TrajectoryPoint.deserialize(reader),
                TrajectoryPoint,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): Trajectory {
      return Trajectory.deserialize(bytes);
    }
  }
  export class VehicleMotionPoint extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            trajectory_point?: TrajectoryPoint;
            steer?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("trajectory_point" in data && data.trajectory_point != undefined) {
          this.trajectory_point = data.trajectory_point;
        }
        if ("steer" in data && data.steer != undefined) {
          this.steer = data.steer;
        }
      }
    }
    get trajectory_point() {
      return pb_1.Message.getWrapperField(this, TrajectoryPoint, 1);
    }
    set trajectory_point(value: TrajectoryPoint) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get steer() {
      return pb_1.Message.getField(this, 2) as number;
    }
    set steer(value: number) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      trajectory_point?: ReturnType<typeof TrajectoryPoint.prototype.toObject>;
      steer?: number;
    }) {
      const message = new VehicleMotionPoint({});
      if (data.trajectory_point != null) {
        message.trajectory_point = TrajectoryPoint.fromObject(data.trajectory_point);
      }
      if (data.steer != null) {
        message.steer = data.steer;
      }
      return message;
    }
    toObject() {
      const data: {
        trajectory_point?: ReturnType<typeof TrajectoryPoint.prototype.toObject>;
        steer?: number;
      } = {};
      if (this.trajectory_point != null) {
        data.trajectory_point = this.trajectory_point.toObject();
      }
      if (this.steer != null) {
        data.steer = this.steer;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.trajectory_point !== undefined) {
        writer.writeMessage(1, this.trajectory_point, () =>
          this.trajectory_point.serialize(writer),
        );
      }
      if (this.steer !== undefined) {
        writer.writeDouble(2, this.steer);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VehicleMotionPoint {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new VehicleMotionPoint();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.trajectory_point,
              () => (message.trajectory_point = TrajectoryPoint.deserialize(reader)),
            );
            break;
          case 2:
            message.steer = reader.readDouble();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): VehicleMotionPoint {
      return VehicleMotionPoint.deserialize(bytes);
    }
  }
  export class VehicleMotion extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            name?: string;
            vehicle_motion_point: VehicleMotionPoint[];
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("name" in data && data.name != undefined) {
          this.name = data.name;
        }
        this.vehicle_motion_point = data.vehicle_motion_point;
      }
    }
    get name() {
      return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get vehicle_motion_point() {
      return pb_1.Message.getRepeatedWrapperField(this, VehicleMotionPoint, 2);
    }
    set vehicle_motion_point(value: VehicleMotionPoint[]) {
      pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
      name?: string;
      vehicle_motion_point: ReturnType<typeof VehicleMotionPoint.prototype.toObject>[];
    }) {
      const message = new VehicleMotion({
        vehicle_motion_point: data.vehicle_motion_point.map((item) =>
          VehicleMotionPoint.fromObject(item),
        ),
      });
      if (data.name != null) {
        message.name = data.name;
      }
      return message;
    }
    toObject() {
      const data: {
        name?: string;
        vehicle_motion_point: ReturnType<typeof VehicleMotionPoint.prototype.toObject>[];
      } = {
        vehicle_motion_point: this.vehicle_motion_point.map((item: VehicleMotionPoint) =>
          item.toObject(),
        ),
      };
      if (this.name != null) {
        data.name = this.name;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (typeof this.name === "string" && this.name.length) {
        writer.writeString(1, this.name);
      }
      if (this.vehicle_motion_point !== undefined) {
        writer.writeRepeatedMessage(2, this.vehicle_motion_point, (item: VehicleMotionPoint) =>
          item.serialize(writer),
        );
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VehicleMotion {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new VehicleMotion();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.name = reader.readString();
            break;
          case 2:
            reader.readMessage(message.vehicle_motion_point, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                2,
                VehicleMotionPoint.deserialize(reader),
                VehicleMotionPoint,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): VehicleMotion {
      return VehicleMotion.deserialize(bytes);
    }
  }
  export class GaussianInfo extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            sigma_x?: number;
            sigma_y?: number;
            correlation?: number;
            area_probability?: number;
            ellipse_a?: number;
            ellipse_b?: number;
            theta_a?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("sigma_x" in data && data.sigma_x != undefined) {
          this.sigma_x = data.sigma_x;
        }
        if ("sigma_y" in data && data.sigma_y != undefined) {
          this.sigma_y = data.sigma_y;
        }
        if ("correlation" in data && data.correlation != undefined) {
          this.correlation = data.correlation;
        }
        if ("area_probability" in data && data.area_probability != undefined) {
          this.area_probability = data.area_probability;
        }
        if ("ellipse_a" in data && data.ellipse_a != undefined) {
          this.ellipse_a = data.ellipse_a;
        }
        if ("ellipse_b" in data && data.ellipse_b != undefined) {
          this.ellipse_b = data.ellipse_b;
        }
        if ("theta_a" in data && data.theta_a != undefined) {
          this.theta_a = data.theta_a;
        }
      }
    }
    get sigma_x() {
      return pb_1.Message.getField(this, 1) as number;
    }
    set sigma_x(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get sigma_y() {
      return pb_1.Message.getField(this, 2) as number;
    }
    set sigma_y(value: number) {
      pb_1.Message.setField(this, 2, value);
    }
    get correlation() {
      return pb_1.Message.getField(this, 3) as number;
    }
    set correlation(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    get area_probability() {
      return pb_1.Message.getField(this, 4) as number;
    }
    set area_probability(value: number) {
      pb_1.Message.setField(this, 4, value);
    }
    get ellipse_a() {
      return pb_1.Message.getField(this, 5) as number;
    }
    set ellipse_a(value: number) {
      pb_1.Message.setField(this, 5, value);
    }
    get ellipse_b() {
      return pb_1.Message.getField(this, 6) as number;
    }
    set ellipse_b(value: number) {
      pb_1.Message.setField(this, 6, value);
    }
    get theta_a() {
      return pb_1.Message.getField(this, 7) as number;
    }
    set theta_a(value: number) {
      pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
      sigma_x?: number;
      sigma_y?: number;
      correlation?: number;
      area_probability?: number;
      ellipse_a?: number;
      ellipse_b?: number;
      theta_a?: number;
    }) {
      const message = new GaussianInfo({});
      if (data.sigma_x != null) {
        message.sigma_x = data.sigma_x;
      }
      if (data.sigma_y != null) {
        message.sigma_y = data.sigma_y;
      }
      if (data.correlation != null) {
        message.correlation = data.correlation;
      }
      if (data.area_probability != null) {
        message.area_probability = data.area_probability;
      }
      if (data.ellipse_a != null) {
        message.ellipse_a = data.ellipse_a;
      }
      if (data.ellipse_b != null) {
        message.ellipse_b = data.ellipse_b;
      }
      if (data.theta_a != null) {
        message.theta_a = data.theta_a;
      }
      return message;
    }
    toObject() {
      const data: {
        sigma_x?: number;
        sigma_y?: number;
        correlation?: number;
        area_probability?: number;
        ellipse_a?: number;
        ellipse_b?: number;
        theta_a?: number;
      } = {};
      if (this.sigma_x != null) {
        data.sigma_x = this.sigma_x;
      }
      if (this.sigma_y != null) {
        data.sigma_y = this.sigma_y;
      }
      if (this.correlation != null) {
        data.correlation = this.correlation;
      }
      if (this.area_probability != null) {
        data.area_probability = this.area_probability;
      }
      if (this.ellipse_a != null) {
        data.ellipse_a = this.ellipse_a;
      }
      if (this.ellipse_b != null) {
        data.ellipse_b = this.ellipse_b;
      }
      if (this.theta_a != null) {
        data.theta_a = this.theta_a;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.sigma_x !== undefined) {
        writer.writeDouble(1, this.sigma_x);
      }
      if (this.sigma_y !== undefined) {
        writer.writeDouble(2, this.sigma_y);
      }
      if (this.correlation !== undefined) {
        writer.writeDouble(3, this.correlation);
      }
      if (this.area_probability !== undefined) {
        writer.writeDouble(4, this.area_probability);
      }
      if (this.ellipse_a !== undefined) {
        writer.writeDouble(5, this.ellipse_a);
      }
      if (this.ellipse_b !== undefined) {
        writer.writeDouble(6, this.ellipse_b);
      }
      if (this.theta_a !== undefined) {
        writer.writeDouble(7, this.theta_a);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GaussianInfo {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new GaussianInfo();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.sigma_x = reader.readDouble();
            break;
          case 2:
            message.sigma_y = reader.readDouble();
            break;
          case 3:
            message.correlation = reader.readDouble();
            break;
          case 4:
            message.area_probability = reader.readDouble();
            break;
          case 5:
            message.ellipse_a = reader.readDouble();
            break;
          case 6:
            message.ellipse_b = reader.readDouble();
            break;
          case 7:
            message.theta_a = reader.readDouble();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): GaussianInfo {
      return GaussianInfo.deserialize(bytes);
    }
  }
}
