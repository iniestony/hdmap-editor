// This Source Code Form is subject to the terms of the Mozilla Public
// License, v2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/

/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.1
 * source: common/error_code.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";

export namespace atlas.common {
  export enum ErrorCode {
    OK = 0,
    CONTROL_ERROR = 1000,
    CONTROL_INIT_ERROR = 1001,
    CONTROL_COMPUTE_ERROR = 1002,
    CONTROL_ESTOP_ERROR = 1003,
    PERFECT_CONTROL_ERROR = 1004,
    CANBUS_ERROR = 2000,
    CAN_CLIENT_ERROR_BASE = 2100,
    CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED = 2101,
    CAN_CLIENT_ERROR_FRAME_NUM = 2102,
    CAN_CLIENT_ERROR_SEND_FAILED = 2103,
    CAN_CLIENT_ERROR_RECV_FAILED = 2104,
    LOCALIZATION_ERROR = 3000,
    LOCALIZATION_ERROR_MSG = 3100,
    LOCALIZATION_ERROR_LIDAR = 3200,
    LOCALIZATION_ERROR_INTEG = 3300,
    LOCALIZATION_ERROR_GNSS = 3400,
    PERCEPTION_ERROR = 4000,
    PERCEPTION_ERROR_TF = 4001,
    PERCEPTION_ERROR_PROCESS = 4002,
    PERCEPTION_FATAL = 4003,
    PERCEPTION_ERROR_NONE = 4004,
    PERCEPTION_ERROR_UNKNOWN = 4005,
    PREDICTION_ERROR = 5000,
    PLANNING_ERROR = 6000,
    PLANNING_ERROR_NOT_READY = 6001,
    HDMAP_DATA_ERROR = 7000,
    ROUTING_ERROR = 8000,
    ROUTING_ERROR_REQUEST = 8001,
    ROUTING_ERROR_RESPONSE = 8002,
    ROUTING_ERROR_NOT_READY = 8003,
    END_OF_INPUT = 9000,
    HTTP_LOGIC_ERROR = 10000,
    HTTP_RUNTIME_ERROR = 10001,
    RELATIVE_MAP_ERROR = 11000,
    RELATIVE_MAP_NOT_READY = 11001,
    DRIVER_ERROR_GNSS = 12000,
    DRIVER_ERROR_VELODYNE = 13000,
    STORYTELLING_ERROR = 14000,
  }
  export class StatusPb extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            error_code?: ErrorCode;
            msg?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("error_code" in data && data.error_code != undefined) {
          this.error_code = data.error_code;
        }
        if ("msg" in data && data.msg != undefined) {
          this.msg = data.msg;
        }
      }
    }
    get error_code() {
      return pb_1.Message.getFieldWithDefault(this, 1, ErrorCode.OK) as ErrorCode;
    }
    set error_code(value: ErrorCode) {
      pb_1.Message.setField(this, 1, value);
    }
    get msg() {
      return pb_1.Message.getField(this, 2) as string;
    }
    set msg(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: { error_code?: ErrorCode; msg?: string }) {
      const message = new StatusPb({});
      if (data.error_code != null) {
        message.error_code = data.error_code;
      }
      if (data.msg != null) {
        message.msg = data.msg;
      }
      return message;
    }
    toObject() {
      const data: {
        error_code?: ErrorCode;
        msg?: string;
      } = {};
      if (this.error_code != null) {
        data.error_code = this.error_code;
      }
      if (this.msg != null) {
        data.msg = this.msg;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.error_code !== undefined) {
        writer.writeEnum(1, this.error_code);
      }
      if (typeof this.msg === "string" && this.msg.length) {
        writer.writeString(2, this.msg);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusPb {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new StatusPb();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.error_code = reader.readEnum();
            break;
          case 2:
            message.msg = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): StatusPb {
      return StatusPb.deserialize(bytes);
    }
  }
}
