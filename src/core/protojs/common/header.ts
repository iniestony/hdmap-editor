// This Source Code Form is subject to the terms of the Mozilla Public
// License, v2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/

/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.1
 * source: common/header.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";

import * as dependency_1 from "./error_code";

export namespace atlas.common {
  export class Header extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            timestamp_sec?: number;
            module_name?: string;
            sequence_num?: number;
            lidar_timestamp?: number;
            camera_timestamp?: number;
            radar_timestamp?: number;
            version?: number;
            status?: dependency_1.atlas.common.StatusPb;
            frame_id?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("timestamp_sec" in data && data.timestamp_sec != undefined) {
          this.timestamp_sec = data.timestamp_sec;
        }
        if ("module_name" in data && data.module_name != undefined) {
          this.module_name = data.module_name;
        }
        if ("sequence_num" in data && data.sequence_num != undefined) {
          this.sequence_num = data.sequence_num;
        }
        if ("lidar_timestamp" in data && data.lidar_timestamp != undefined) {
          this.lidar_timestamp = data.lidar_timestamp;
        }
        if ("camera_timestamp" in data && data.camera_timestamp != undefined) {
          this.camera_timestamp = data.camera_timestamp;
        }
        if ("radar_timestamp" in data && data.radar_timestamp != undefined) {
          this.radar_timestamp = data.radar_timestamp;
        }
        if ("version" in data && data.version != undefined) {
          this.version = data.version;
        }
        if ("status" in data && data.status != undefined) {
          this.status = data.status;
        }
        if ("frame_id" in data && data.frame_id != undefined) {
          this.frame_id = data.frame_id;
        }
      }
    }
    get timestamp_sec() {
      return pb_1.Message.getField(this, 1) as number;
    }
    set timestamp_sec(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get module_name() {
      return pb_1.Message.getField(this, 2) as string;
    }
    set module_name(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get sequence_num() {
      return pb_1.Message.getField(this, 3) as number;
    }
    set sequence_num(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    get lidar_timestamp() {
      return pb_1.Message.getField(this, 4) as number;
    }
    set lidar_timestamp(value: number) {
      pb_1.Message.setField(this, 4, value);
    }
    get camera_timestamp() {
      return pb_1.Message.getField(this, 5) as number;
    }
    set camera_timestamp(value: number) {
      pb_1.Message.setField(this, 5, value);
    }
    get radar_timestamp() {
      return pb_1.Message.getField(this, 6) as number;
    }
    set radar_timestamp(value: number) {
      pb_1.Message.setField(this, 6, value);
    }
    get version() {
      return pb_1.Message.getFieldWithDefault(this, 7, 1) as number;
    }
    set version(value: number) {
      pb_1.Message.setField(this, 7, value);
    }
    get status() {
      return pb_1.Message.getWrapperField(this, dependency_1.atlas.common.StatusPb, 8);
    }
    set status(value: dependency_1.atlas.common.StatusPb) {
      pb_1.Message.setWrapperField(this, 8, value);
    }
    get frame_id() {
      return pb_1.Message.getField(this, 9) as string;
    }
    set frame_id(value: string) {
      pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
      timestamp_sec?: number;
      module_name?: string;
      sequence_num?: number;
      lidar_timestamp?: number;
      camera_timestamp?: number;
      radar_timestamp?: number;
      version?: number;
      status?: ReturnType<typeof dependency_1.atlas.common.StatusPb.prototype.toObject>;
      frame_id?: string;
    }) {
      const message = new Header({});
      if (data.timestamp_sec != null) {
        message.timestamp_sec = data.timestamp_sec;
      }
      if (data.module_name != null) {
        message.module_name = data.module_name;
      }
      if (data.sequence_num != null) {
        message.sequence_num = data.sequence_num;
      }
      if (data.lidar_timestamp != null) {
        message.lidar_timestamp = data.lidar_timestamp;
      }
      if (data.camera_timestamp != null) {
        message.camera_timestamp = data.camera_timestamp;
      }
      if (data.radar_timestamp != null) {
        message.radar_timestamp = data.radar_timestamp;
      }
      if (data.version != null) {
        message.version = data.version;
      }
      if (data.status != null) {
        message.status = dependency_1.atlas.common.StatusPb.fromObject(data.status);
      }
      if (data.frame_id != null) {
        message.frame_id = data.frame_id;
      }
      return message;
    }
    toObject() {
      const data: {
        timestamp_sec?: number;
        module_name?: string;
        sequence_num?: number;
        lidar_timestamp?: number;
        camera_timestamp?: number;
        radar_timestamp?: number;
        version?: number;
        status?: ReturnType<typeof dependency_1.atlas.common.StatusPb.prototype.toObject>;
        frame_id?: string;
      } = {};
      if (this.timestamp_sec != null) {
        data.timestamp_sec = this.timestamp_sec;
      }
      if (this.module_name != null) {
        data.module_name = this.module_name;
      }
      if (this.sequence_num != null) {
        data.sequence_num = this.sequence_num;
      }
      if (this.lidar_timestamp != null) {
        data.lidar_timestamp = this.lidar_timestamp;
      }
      if (this.camera_timestamp != null) {
        data.camera_timestamp = this.camera_timestamp;
      }
      if (this.radar_timestamp != null) {
        data.radar_timestamp = this.radar_timestamp;
      }
      if (this.version != null) {
        data.version = this.version;
      }
      if (this.status != null) {
        data.status = this.status.toObject();
      }
      if (this.frame_id != null) {
        data.frame_id = this.frame_id;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.timestamp_sec !== undefined) {
        writer.writeDouble(1, this.timestamp_sec);
      }
      if (typeof this.module_name === "string" && this.module_name.length) {
        writer.writeString(2, this.module_name);
      }
      if (this.sequence_num !== undefined) {
        writer.writeUint32(3, this.sequence_num);
      }
      if (this.lidar_timestamp !== undefined) {
        writer.writeUint64(4, this.lidar_timestamp);
      }
      if (this.camera_timestamp !== undefined) {
        writer.writeUint64(5, this.camera_timestamp);
      }
      if (this.radar_timestamp !== undefined) {
        writer.writeUint64(6, this.radar_timestamp);
      }
      if (this.version !== undefined) {
        writer.writeUint32(7, this.version);
      }
      if (this.status !== undefined) {
        writer.writeMessage(8, this.status, () => this.status.serialize(writer));
      }
      if (typeof this.frame_id === "string" && this.frame_id.length) {
        writer.writeString(9, this.frame_id);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Header {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new Header();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.timestamp_sec = reader.readDouble();
            break;
          case 2:
            message.module_name = reader.readString();
            break;
          case 3:
            message.sequence_num = reader.readUint32();
            break;
          case 4:
            message.lidar_timestamp = reader.readUint64();
            break;
          case 5:
            message.camera_timestamp = reader.readUint64();
            break;
          case 6:
            message.radar_timestamp = reader.readUint64();
            break;
          case 7:
            message.version = reader.readUint32();
            break;
          case 8:
            reader.readMessage(
              message.status,
              () => (message.status = dependency_1.atlas.common.StatusPb.deserialize(reader)),
            );
            break;
          case 9:
            message.frame_id = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): Header {
      return Header.deserialize(bytes);
    }
  }
}
