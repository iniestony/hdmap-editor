// This Source Code Form is subject to the terms of the Mozilla Public
// License, v2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/

/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.1
 * source: common/geometry.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";

export namespace atlas.common {
  export class PointENU extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            x?: number;
            y?: number;
            z?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("x" in data && data.x != undefined) {
          this.x = data.x;
        }
        if ("y" in data && data.y != undefined) {
          this.y = data.y;
        }
        if ("z" in data && data.z != undefined) {
          this.z = data.z;
        }
      }
    }
    get x() {
      return pb_1.Message.getFieldWithDefault(this, 1, NaN);
    }
    set x(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get y() {
      return pb_1.Message.getFieldWithDefault(this, 2, NaN);
    }
    set y(value: number) {
      pb_1.Message.setField(this, 2, value);
    }
    get z() {
      return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set z(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: { x?: number; y?: number; z?: number }) {
      const message = new PointENU({});
      if (data.x != null) {
        message.x = data.x;
      }
      if (data.y != null) {
        message.y = data.y;
      }
      if (data.z != null) {
        message.z = data.z;
      }
      return message;
    }
    toObject() {
      const data: {
        x?: number;
        y?: number;
        z?: number;
      } = {};
      if (this.x != null) {
        data.x = this.x;
      }
      if (this.y != null) {
        data.y = this.y;
      }
      if (this.z != null) {
        data.z = this.z;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.x !== undefined) {
        writer.writeDouble(1, this.x);
      }
      if (this.y !== undefined) {
        writer.writeDouble(2, this.y);
      }
      if (this.z !== undefined) {
        writer.writeDouble(3, this.z);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PointENU {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new PointENU();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.x = reader.readDouble();
            break;
          case 2:
            message.y = reader.readDouble();
            break;
          case 3:
            message.z = reader.readDouble();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): PointENU {
      return PointENU.deserialize(bytes);
    }
  }
  export class PointLLH extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            lon?: number;
            lat?: number;
            height?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("lon" in data && data.lon != undefined) {
          this.lon = data.lon;
        }
        if ("lat" in data && data.lat != undefined) {
          this.lat = data.lat;
        }
        if ("height" in data && data.height != undefined) {
          this.height = data.height;
        }
      }
    }
    get lon() {
      return pb_1.Message.getFieldWithDefault(this, 1, NaN);
    }
    set lon(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get lat() {
      return pb_1.Message.getFieldWithDefault(this, 2, NaN);
    }
    set lat(value: number) {
      pb_1.Message.setField(this, 2, value);
    }
    get height() {
      return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set height(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: { lon?: number; lat?: number; height?: number }) {
      const message = new PointLLH({});
      if (data.lon != null) {
        message.lon = data.lon;
      }
      if (data.lat != null) {
        message.lat = data.lat;
      }
      if (data.height != null) {
        message.height = data.height;
      }
      return message;
    }
    toObject() {
      const data: {
        lon?: number;
        lat?: number;
        height?: number;
      } = {};
      if (this.lon != null) {
        data.lon = this.lon;
      }
      if (this.lat != null) {
        data.lat = this.lat;
      }
      if (this.height != null) {
        data.height = this.height;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.lon !== undefined) {
        writer.writeDouble(1, this.lon);
      }
      if (this.lat !== undefined) {
        writer.writeDouble(2, this.lat);
      }
      if (this.height !== undefined) {
        writer.writeDouble(3, this.height);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PointLLH {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new PointLLH();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.lon = reader.readDouble();
            break;
          case 2:
            message.lat = reader.readDouble();
            break;
          case 3:
            message.height = reader.readDouble();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): PointLLH {
      return PointLLH.deserialize(bytes);
    }
  }
  export class Point2D extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            x?: number;
            y?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("x" in data && data.x != undefined) {
          this.x = data.x;
        }
        if ("y" in data && data.y != undefined) {
          this.y = data.y;
        }
      }
    }
    get x() {
      return pb_1.Message.getFieldWithDefault(this, 1, NaN);
    }
    set x(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get y() {
      return pb_1.Message.getFieldWithDefault(this, 2, NaN);
    }
    set y(value: number) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: { x?: number; y?: number }) {
      const message = new Point2D({});
      if (data.x != null) {
        message.x = data.x;
      }
      if (data.y != null) {
        message.y = data.y;
      }
      return message;
    }
    toObject() {
      const data: {
        x?: number;
        y?: number;
      } = {};
      if (this.x != null) {
        data.x = this.x;
      }
      if (this.y != null) {
        data.y = this.y;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.x !== undefined) {
        writer.writeDouble(1, this.x);
      }
      if (this.y !== undefined) {
        writer.writeDouble(2, this.y);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Point2D {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new Point2D();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.x = reader.readDouble();
            break;
          case 2:
            message.y = reader.readDouble();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): Point2D {
      return Point2D.deserialize(bytes);
    }
  }
  export class Point3D extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            x?: number;
            y?: number;
            z?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("x" in data && data.x != undefined) {
          this.x = data.x;
        }
        if ("y" in data && data.y != undefined) {
          this.y = data.y;
        }
        if ("z" in data && data.z != undefined) {
          this.z = data.z;
        }
      }
    }
    get x() {
      return pb_1.Message.getFieldWithDefault(this, 1, NaN);
    }
    set x(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get y() {
      return pb_1.Message.getFieldWithDefault(this, 2, NaN);
    }
    set y(value: number) {
      pb_1.Message.setField(this, 2, value);
    }
    get z() {
      return pb_1.Message.getFieldWithDefault(this, 3, NaN);
    }
    set z(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: { x?: number; y?: number; z?: number }) {
      const message = new Point3D({});
      if (data.x != null) {
        message.x = data.x;
      }
      if (data.y != null) {
        message.y = data.y;
      }
      if (data.z != null) {
        message.z = data.z;
      }
      return message;
    }
    toObject() {
      const data: {
        x?: number;
        y?: number;
        z?: number;
      } = {};
      if (this.x != null) {
        data.x = this.x;
      }
      if (this.y != null) {
        data.y = this.y;
      }
      if (this.z != null) {
        data.z = this.z;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.x !== undefined) {
        writer.writeDouble(1, this.x);
      }
      if (this.y !== undefined) {
        writer.writeDouble(2, this.y);
      }
      if (this.z !== undefined) {
        writer.writeDouble(3, this.z);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Point3D {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new Point3D();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.x = reader.readDouble();
            break;
          case 2:
            message.y = reader.readDouble();
            break;
          case 3:
            message.z = reader.readDouble();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): Point3D {
      return Point3D.deserialize(bytes);
    }
  }
  export class Quaternion extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            qx?: number;
            qy?: number;
            qz?: number;
            qw?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("qx" in data && data.qx != undefined) {
          this.qx = data.qx;
        }
        if ("qy" in data && data.qy != undefined) {
          this.qy = data.qy;
        }
        if ("qz" in data && data.qz != undefined) {
          this.qz = data.qz;
        }
        if ("qw" in data && data.qw != undefined) {
          this.qw = data.qw;
        }
      }
    }
    get qx() {
      return pb_1.Message.getFieldWithDefault(this, 1, NaN);
    }
    set qx(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get qy() {
      return pb_1.Message.getFieldWithDefault(this, 2, NaN);
    }
    set qy(value: number) {
      pb_1.Message.setField(this, 2, value);
    }
    get qz() {
      return pb_1.Message.getFieldWithDefault(this, 3, NaN);
    }
    set qz(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    get qw() {
      return pb_1.Message.getFieldWithDefault(this, 4, NaN);
    }
    set qw(value: number) {
      pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: { qx?: number; qy?: number; qz?: number; qw?: number }) {
      const message = new Quaternion({});
      if (data.qx != null) {
        message.qx = data.qx;
      }
      if (data.qy != null) {
        message.qy = data.qy;
      }
      if (data.qz != null) {
        message.qz = data.qz;
      }
      if (data.qw != null) {
        message.qw = data.qw;
      }
      return message;
    }
    toObject() {
      const data: {
        qx?: number;
        qy?: number;
        qz?: number;
        qw?: number;
      } = {};
      if (this.qx != null) {
        data.qx = this.qx;
      }
      if (this.qy != null) {
        data.qy = this.qy;
      }
      if (this.qz != null) {
        data.qz = this.qz;
      }
      if (this.qw != null) {
        data.qw = this.qw;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.qx !== undefined) {
        writer.writeDouble(1, this.qx);
      }
      if (this.qy !== undefined) {
        writer.writeDouble(2, this.qy);
      }
      if (this.qz !== undefined) {
        writer.writeDouble(3, this.qz);
      }
      if (this.qw !== undefined) {
        writer.writeDouble(4, this.qw);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Quaternion {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new Quaternion();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.qx = reader.readDouble();
            break;
          case 2:
            message.qy = reader.readDouble();
            break;
          case 3:
            message.qz = reader.readDouble();
            break;
          case 4:
            message.qw = reader.readDouble();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): Quaternion {
      return Quaternion.deserialize(bytes);
    }
  }
  export class Polygon extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            point: Point3D[];
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
      if (!Array.isArray(data) && typeof data == "object") {
        this.point = data.point;
      }
    }
    get point() {
      return pb_1.Message.getRepeatedWrapperField(this, Point3D, 1);
    }
    set point(value: Point3D[]) {
      pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: { point: ReturnType<typeof Point3D.prototype.toObject>[] }) {
      const message = new Polygon({
        point: data.point.map((item) => Point3D.fromObject(item)),
      });
      return message;
    }
    toObject() {
      const data: {
        point: ReturnType<typeof Point3D.prototype.toObject>[];
      } = {
        point: this.point.map((item: Point3D) => item.toObject()),
      };
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.point !== undefined) {
        writer.writeRepeatedMessage(1, this.point, (item: Point3D) => item.serialize(writer));
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Polygon {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new Polygon();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(message.point, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                1,
                Point3D.deserialize(reader),
                Point3D,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): Polygon {
      return Polygon.deserialize(bytes);
    }
  }
}
