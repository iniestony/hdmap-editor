// This Source Code Form is subject to the terms of the Mozilla Public
// License, v2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/

/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.1
 * source: common/vehicle_signal.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";

export namespace atlas.common {
  export class VehicleSignal extends pb_1.Message {
    constructor(
      data?:
        | any[]
        | {
            turn_signal?: VehicleSignal.TurnSignal;
            high_beam?: boolean;
            low_beam?: boolean;
            horn?: boolean;
            emergency_light?: boolean;
          },
    ) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("turn_signal" in data && data.turn_signal != undefined) {
          this.turn_signal = data.turn_signal;
        }
        if ("high_beam" in data && data.high_beam != undefined) {
          this.high_beam = data.high_beam;
        }
        if ("low_beam" in data && data.low_beam != undefined) {
          this.low_beam = data.low_beam;
        }
        if ("horn" in data && data.horn != undefined) {
          this.horn = data.horn;
        }
        if ("emergency_light" in data && data.emergency_light != undefined) {
          this.emergency_light = data.emergency_light;
        }
      }
    }
    get turn_signal() {
      return pb_1.Message.getField(this, 1) as VehicleSignal.TurnSignal;
    }
    set turn_signal(value: VehicleSignal.TurnSignal) {
      pb_1.Message.setField(this, 1, value);
    }
    get high_beam() {
      return pb_1.Message.getField(this, 2) as boolean;
    }
    set high_beam(value: boolean) {
      pb_1.Message.setField(this, 2, value);
    }
    get low_beam() {
      return pb_1.Message.getField(this, 3) as boolean;
    }
    set low_beam(value: boolean) {
      pb_1.Message.setField(this, 3, value);
    }
    get horn() {
      return pb_1.Message.getField(this, 4) as boolean;
    }
    set horn(value: boolean) {
      pb_1.Message.setField(this, 4, value);
    }
    get emergency_light() {
      return pb_1.Message.getField(this, 5) as boolean;
    }
    set emergency_light(value: boolean) {
      pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
      turn_signal?: VehicleSignal.TurnSignal;
      high_beam?: boolean;
      low_beam?: boolean;
      horn?: boolean;
      emergency_light?: boolean;
    }) {
      const message = new VehicleSignal({});
      if (data.turn_signal != null) {
        message.turn_signal = data.turn_signal;
      }
      if (data.high_beam != null) {
        message.high_beam = data.high_beam;
      }
      if (data.low_beam != null) {
        message.low_beam = data.low_beam;
      }
      if (data.horn != null) {
        message.horn = data.horn;
      }
      if (data.emergency_light != null) {
        message.emergency_light = data.emergency_light;
      }
      return message;
    }
    toObject() {
      const data: {
        turn_signal?: VehicleSignal.TurnSignal;
        high_beam?: boolean;
        low_beam?: boolean;
        horn?: boolean;
        emergency_light?: boolean;
      } = {};
      if (this.turn_signal != null) {
        data.turn_signal = this.turn_signal;
      }
      if (this.high_beam != null) {
        data.high_beam = this.high_beam;
      }
      if (this.low_beam != null) {
        data.low_beam = this.low_beam;
      }
      if (this.horn != null) {
        data.horn = this.horn;
      }
      if (this.emergency_light != null) {
        data.emergency_light = this.emergency_light;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.turn_signal !== undefined) {
        writer.writeEnum(1, this.turn_signal);
      }
      if (this.high_beam !== undefined) {
        writer.writeBool(2, this.high_beam);
      }
      if (this.low_beam !== undefined) {
        writer.writeBool(3, this.low_beam);
      }
      if (this.horn !== undefined) {
        writer.writeBool(4, this.horn);
      }
      if (this.emergency_light !== undefined) {
        writer.writeBool(5, this.emergency_light);
      }
      if (!w) {
        return writer.getResultBuffer();
      }
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VehicleSignal {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
        message = new VehicleSignal();
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        switch (reader.getFieldNumber()) {
          case 1:
            message.turn_signal = reader.readEnum();
            break;
          case 2:
            message.high_beam = reader.readBool();
            break;
          case 3:
            message.low_beam = reader.readBool();
            break;
          case 4:
            message.horn = reader.readBool();
            break;
          case 5:
            message.emergency_light = reader.readBool();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): VehicleSignal {
      return VehicleSignal.deserialize(bytes);
    }
  }
  export namespace VehicleSignal {
    export enum TurnSignal {
      TURN_NONE = 0,
      TURN_LEFT = 1,
      TURN_RIGHT = 2,
    }
  }
}
